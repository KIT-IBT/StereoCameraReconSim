%% -------------------------------------------------------
%
%    plotSetupOverview - Plots the postition of the camera apertures in
%    world coordinates, as well as the respective camera coordinate
%    systems, into a common 3D figure. Gives an overview of the camera
%    setup specified by the user in camSetup.m
%
%    Ver. 1.0
%
%    Created:           Jan Kost (02.04.2018)
%    Last modified:     Jan Kost (19.10.2020)
%
%    Institute of Biomedical Engineering
%    Karlsruhe Institute of Technology
%
%    http://www.ibt.kit.edu
%
%    Copyright 2020 - All rights reserved.
%
% ------------------------------------------------------
%
%  coordSysOverview = plotSetupOverview(name,camParams,dispPlot)
% 
%        input: 
%               dispPlot:   Toggle plot visibility
%
%               name:       Desired figure window title.
%
%               camParams:  output-struct of "calcCamPos"
%
%        output: 
%               coordSysOverview: Handle for the figure generated by this
%                                 function

function coordSysOverview = plotSetupOverview(name,camParams,dispPlot)
    center = camParams.center;
    azimuths = camParams.positions(:,1); 
    elevations = camParams.positions(:,2);
    radii = camParams.positions(:,3);
    
    aperturesInWorldCoords = camParams.apertureInWorld;

    looks = camParams.viewDir;
    upNorms = camParams.upDir;
    rights = camParams.rightDir;

    fig1 = figure('Name',name,'NumberTitle','off','Visible',dispPlot);
    radius = radii(1);
    tmp = radii - radius;
    if ~any(tmp)
        %plot reference sphere only if all cameras have the same radius in
        %spherical coordinates

        %generate reference sphere grid
        [x,y,z] = sphere(30);
        % this maps the output of "sphere()" onto a half sphere 
        indexList = [];
        for g_1 = 1:size(z,1)
            for g_2 = 1:size(z,2)
                if z(g_1,g_2) < 0
                    z(g_1,g_2) = 0;
                    indexList = [indexList;[g_1,g_2]];
                end    
            end
        end
        %plot the half sphere
        surf((radius.*x)+center(1), (radius.*y)+center(2), ...
             (radius.*z)+center(3),'FaceAlpha',0,'LineWidth',...
                                                    0.25,'EdgeAlpha',0.25);
    end
    xlabel('x')
    ylabel('y')
    zlabel('z')
    s_1 = 1.5;%scale factor
    xlim([center(1)-s_1*radius,center(1)+s_1*radius])
    ylim([center(2)-s_1*radius,center(2)+s_1*radius]) 
    zlim([center(3)-0.5*radius,center(3)+s_1*radius]) 
    hold on
    coord = [0,0,s_1*radius;0,s_1*radius,0;s_1*radius,0,0];
    ls = 10; %text label shift in axis units
    if any(center) 
        %plot separate world coordinate system if the camera setup focal 
        %point is not the world origin. also plot shift vector from origin
        %to focal point
        
        %plot the coord system axes
        a = zeros(3);
        
        quiver3(a(:,1),a(:,2),a(:,3),coord(:,1),coord(:,2),coord(:,3),...
                                              0,'Color','k','LineWidth',2);
        text(ls,ls,ls,'World Origin',...
             'BackgroundColor','none',...
             'Tag','Origin_Label')
        %plot shift vector
        a = zeros(3);
        quiver3(a(1,1),a(1,2),a(1,3),center(1),center(2),center(3),...
                                              0,'Color','m','LineWidth',2);
        text(center(1)-ls,center(2)-ls,center(3)-ls,...
             'Focal Point',...
             'BackgroundColor','none',...
             'Tag','Origin_Label_2')
    else
        text(center(1)-ls,center(2)-ls,center(3)-ls,...
             'World Origin = Focal Point',...
             'BackgroundColor','none',...
             'Tag','Origin_Label')
    end
    %plot coordinate axes centerd on the focal point (camera setup origin) 
    b = repmat(center,3,1);
    quiver3(b(:,1),b(:,2),b(:,3),coord(:,1),coord(:,2),coord(:,3),...
                                    0,'Color',[0.5,0.5,0.5],'LineWidth',2);
    
    %plot camera apertures  
    scatter3(aperturesInWorldCoords(:,1),aperturesInWorldCoords(:,2),...
             aperturesInWorldCoords(:,3),'filled','MarkerEdgeColor','r',...
                                                    'MarkerFaceColor','g');
    for k = 1:size(aperturesInWorldCoords,1)
        x_t = aperturesInWorldCoords(k,1); 
        y_t = aperturesInWorldCoords(k,2);
        z_t = aperturesInWorldCoords(k,3);
        d = 1.02;
        text(d*x_t,d*y_t,d*z_t,['cam ',num2str(k)],...
                                'BackgroundColor','none');
    end
        
    %plot actual camera coordinate systems 
    s_2 = 0.25*radius; %scale factor
    quiver3(aperturesInWorldCoords(:,1),aperturesInWorldCoords(:,2),...
            aperturesInWorldCoords(:,3),rights(:,1)*s_2,...
              rights(:,2)*s_2,rights(:,3)*s_2,0,'Color','g','LineWidth',1);
    quiver3(aperturesInWorldCoords(:,1),aperturesInWorldCoords(:,2),...
            aperturesInWorldCoords(:,3),looks(:,1)*s_2,...
                looks(:,2)*s_2,looks(:,3)*s_2,0,'Color','r','LineWidth',1);
    quiver3(aperturesInWorldCoords(:,1),aperturesInWorldCoords(:,2),...
            aperturesInWorldCoords(:,3),upNorms(:,1)*s_2,...
            upNorms(:,2)*s_2,upNorms(:,3)*s_2,0,'Color','b','LineWidth',1);
    hold off
    coordSysOverview = fig1;
end